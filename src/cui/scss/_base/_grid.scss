//   ========================================================
// * @name       _grid.scss
// * @desc       Responsive grid styles
// * @author     Manolo Farfan, Craig Patik
// * @version    1.0.0.20141231
// * @see        https://github.com/ny/frg-coreui
//   ========================================================


// * @section    Row and col structures
// * @desc       The grid's row and columns (default cols 12)
// *             - Fluid & fixed + fluid layouts with fillers
// *             - Clearfix to force new row
// * --------------------------------------------------------
.cui-row {
    @include row;
}

[class*="cui-col-"] {
    min-height: 1.5em;
}

[class*="cui-fixed-col-"] {
    float: left;
}

[class*="cui-col-"],
[class*="cui-fixed-col-"],
[class*="cui-filler-col-"] {
    position: relative;
    overflow: hidden;
    @include clearfix;
}

[class*="cui-col-"],
[class*="cui-fixed-col-"],
[class*="cui-filler-col-"],
section > header,
nav > header {
    padding: $cui-grid-column-padding;
}

.cui-filler-col-small {
    float: none;
    width: auto;
    overflow: hidden;
}

.cui-row,
[class*="cui-filler-col-"],
.cui-clearfix {
    @include clearfix;
}


// * @section    Column generation
// * --------------------------------------------------------

$cui-grid-breakpoints: (
    ("medium" $cui-bp-medium),
    ("large" $cui-bp-large)
);

@function column-width-calc($colNumber, $colTotal) {
    @return percentage($colNumber / $colTotal);
}

@mixin generate-grid($numColumns: $cui-grid-column-count) {


    @function column-width-calc($colNumber, $colTotal) {
        @return percentage($colNumber / $colTotal);
    }

    // Base (small) size -- these classes are not wrapped in a media query
    @include generate-column("small", $numColumns, $cui-bp-medium);

    // All other sizes
    @each $b in $cui-grid-breakpoints {
        $breakpointName: nth($b, 1);
        $breakpointMinWidth: nth($b, 2);

        // Create a new media query for the breakpoint
        @include pointbreak($breakpointMinWidth) {
            // Generate classes within the media query
            @include generate-column($breakpointName, $numColumns);

            // Breakpoint-specific utility columns
            .cui-filler-col-#{$breakpointName} {
                float: none;
                width: auto;
                overflow: hidden;
            }

            .cui-hide-col-#{$breakpointName} {
                @include hide-voluntary;
            }

            .cui-inline-col-#{$breakpointName} {
                display: inline-block;
                float: none;
                width: auto;
            }

            [class*="cui-col-#{$breakpointName}-"] {
                float: left;
            }
        }
    }
}

@mixin generate-column($breakpointName: "", $numColumns: $cui-grid-column-count, $breakpointMaxWidth: "") {
    // Loop through each column creating the grid
    @for $i from 1 to $numColumns + 1 {

        // Create this column number and assign it the correct width.
        .cui-col-#{$breakpointName}-#{$i} {
            width: column-width-calc($i, $numColumns);
        }

        @if $breakpointMaxWidth != "" {
            @if $i == 6 {
                // Make sure every column that begins a new "row" clears the elements before it.
                // E.g. if there are four cols inside a row, and the first col is tall, the third col would not wrap down to a new line as intended
                // We're using `max-width` media query so it doesn't affect a `.cui-col-small-6.cui-col-medium-*` element in a larger viewport
                //TODO: Copy this practice for other classes (e.g. every 4th col-small-4 should wrap to a new line)
                //FIXME: This currently only generates for the small (no-MQ) breakpoint
                @include pointbreak($breakpointMaxWidth, true) {
                    .cui-col-#{$breakpointName}-#{$i}:nth-child(2n+3) {
                        clear: both;
                    }
                }
            }
        }
    }

    // Loop through again this time creating the `push` classes
    @for $i from 1 to $numColumns {
        .cui-push-#{$breakpointName}-#{$i} {
            margin-left: column-width-calc($i, $numColumns);
        }
    }

    // Loop through again this time creating the `pull` classes
    @for $i from 1 to $numColumns {
        .cui-pull-#{$breakpointName}-#{$i} {
            margin-right: column-width-calc($i, $numColumns);
        }
    }
}


// Returns the styles for a single column
@mixin grid-column($numerator: 1, $denominator: $cui-grid-column-count) {
    width: column-width-calc($numerator, $denominator);

    @each $b in $cui-grid-breakpoints {
        $breakpointName: nth($b, 1);
        $breakpointMinWidth: nth($b, 2);

        // Create a new media query for the breakpoint
        @include pointbreak($breakpointMinWidth) {
            // Generate classes within the media query
            width: column-width-calc($numerator, $denominator);
        }
    }
}

// Generate the grid and column classes
@include generate-grid($cui-grid-column-count);


// * @section    Tablet (medium) column widths
// * --------------------------------------------------------
@media only screen and (min-width: $cui-bp-medium) {
    .cui-hide-col-small,
    .cui-hide-col-large {
        display: block;
    }

    [class$="medium-200"] {
        width: 200px;
    }
}


// * @section    Desktop (large) column widths
// * --------------------------------------------------------
@media only screen and (min-width: $cui-bp-large) {
    .cui-hide-col-small,
    .cui-hide-col-medium {
        display: block;
    }
}


// * @section    Push columns
// * --------------------------------------------------------
.cui-push-right {
    float: right;
}
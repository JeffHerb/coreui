//   ========================================================
// * @name       _utilities/_mixins.scss
// * @desc       sass mixins
// * @author     Manolo Farfan, Craig Patik
// * @version    1.0.0.20150204
// * @see        https://github.com/ny/coreui
//   ========================================================


// * @section    General
// * --------------------------------------------------------
@mixin no-padding-margin {
    padding: 0;
    margin: 0;
}

@mixin input-shadow {
    box-shadow: rgba(0, 0, 0, 0.1) 0 1px 1px 0 inset;
}

@mixin transition($val...) {
    -webkit-transition: $val;
            transition: $val;
}

@mixin transform($val) {
    -webkit-transform: $val;
        -ms-transform: $val;
            transform: $val;
}

@mixin clearfix {
    &:after {
       content: "";
       display: table;
       clear: both;
    }
}

// Hide item but let it be overriden if needed
@mixin hide-voluntary {
    display: none;
}

// Force an item to be completely hidden
@mixin hide-forced {
    display: none !important;
}

// Hide an element in place. Try to use this as much as possible
// (rather than `hide-off-screen`) because it won't cause side
// effects with the viewport and doesn't resort to hacks
@mixin hide {
    display: block !important;
    position: absolute !important;
    clip: rect(0, 0, 0, 0) !important;
    clip: rect(0 0 0 0) !important;
}

// Hide an element by pushing it out of the viewport, to the left
// This is necessary in some cases where the element may change
// state and cause undesirable side effects. For example, if you
// used `hide` on an input field, tapping on its label in Android
// would cause an odd, seamingly misplaced blue flash as the input
// temporarily gained focus.
// Note that this may cause performance issues due to some
// browsers considering the page to be 9999em wide, thereby using
// more memory for visual rendering.
@mixin hide-alternate {
    display: block !important;
    position: absolute !important;
    left: -9999em !important;
    top: 0 !important;
}

// Hides the inner text of an element (e.g. for icons)
@mixin hide-text {
    text-indent: 100%;
    white-space: nowrap;
    overflow: hidden;
}

// // Force an element to be displayed
// @mixin show-forced($class) {
//     // Only render if a class was provided
//     @if $dir != "" {
//         // Default display type (inherit from parent)
//         .#{$class} {
//             display: inherit !important;
//         }

//         // Inline elements
//         span.#{$class},
//         a.#{$class} {
//             display: inline !important;
//         }

//         // List elements
//         li.#{$class} {
//             display: list-item !important;
//         }

//         // Inline blocks
//         input.#{$class},
//         button.#{$class},
//         select.#{$class},
//         textarea.#{$class} {
//             display: inline-block !important;
//         }
//     }
// }

@mixin box-sizing($val: border-box) {
    -moz-box-sizing: $val;
         box-sizing: $val;
}

// Simple 2-color gradient
@mixin vertical-gradient($top: transparent, $bottom: transparent) {
    background-image: -webkit-linear-gradient(top, $top, $bottom);
    background-image:         linear-gradient(to bottom, $top, $bottom);
}

// Gradient with more than 2 color stops
@mixin vertical-gradient-multiple($val...) {
    background-image: -webkit-linear-gradient($val);
    background-image:         linear-gradient($val);
}

// Enable GPU acceleration when available. Use only on
// animated/transitioned elements (rather than `<body>`
// or other large containers)
@mixin enable-gpu {
    -webkit-backface-visibility: hidden;
    -ms-transform: translate3d(0, 0, 0);
}

@mixin animation($value) {
    @include enable-gpu;
    -webkit-animation: $value;
            animation: $value;
}

// Prevent the user from selecting text
// http://caniuse.com/user-select-none
@mixin user-select($type: none) {
    -webkit-user-select: $type;
       -moz-user-select: $type;
        -ms-user-select: $type;
            user-select: $type;
}

@mixin hyphenation($type: auto) {
    // http://caniuse.com/css-hyphens
    -webkit-hyphens: $type;
       -moz-hyphens: $type;
        -ms-hyphens: $type;
            hyphens: $type;
}

@mixin align-right {
    text-align: right;
}

@mixin align-center {
    text-align: center;
}


// * @section    Sticky positioning
// * --------------------------------------------------------
// Must specify a `top` value and no parent may have `overflow: hidden`
@mixin position-sticky {
    position: -webkit-sticky;
    position:         sticky;
}


// * @section    Triangle ◄ ▲ ► ▼
// * @see        http://css-tricks.com/snippets/css/css-triangle/
// * --------------------------------------------------------
// To make equilateral:
// border-bottom-width = 0.866% * (border-left-width + border-right-width)
@mixin triangle($dir: "down", $size: 10px, $color: black) {
    width: 0;
    height: 0;

    @if $dir == "up" {
        border-bottom: $size solid $color;
        border-left:   $size solid transparent;
        border-right:  $size solid transparent;
        border-top:  none;
    }
    @elseif $dir == "right" {
        border-left:   $size solid $color;
        border-top:    $size solid transparent;
        border-bottom: $size solid transparent;
        border-right:  none;
    }
    @elseif $dir == "left" {
        border-right:  $size solid $color;
        border-top:    $size solid transparent;
        border-bottom: $size solid transparent;
        border-left:  none;
    }
    @else {
        border-top:   $size solid $color;
        border-left:  $size solid transparent;
        border-right: $size solid transparent;
        border-bottom:  none;
    }
}

// Standard button style
@mixin button {
    color: $cui-button-color;
    border: $cui-button-border;
    border-radius: $cui-button-border-radius;
    margin: 0;
    text-decoration: $cui-button-text-decoration;
    font-size: $cui-button-font-size;
    font-weight: $cui-button-font-weight;
    background-color: $cui-button-bg-color;
    text-shadow: $cui-button-text-shadow;
    white-space: $cui-button-text-wrapping;
}

@mixin button-primary {
    color: $cui-button-primary-color;
    border: $cui-button-primary-border;
    background-color: $cui-button-primary-bg-color;
    text-decoration: $cui-button-primary-text-decoration;
    text-shadow: $cui-button-primary-text-shadow;
    -webkit-font-smoothing: antialiased;

    &:hover {
        @include button-primary-hover;
    }

    &:active {
        @include button-primary-active;
    }
}

@mixin button-primary-hover {
    color: $cui-button-primary-color-hover; // Repeated for elements that only include this mixin and not the basic primary styles
    border-color: $cui-button-primary-border-hover-color;
    background-color: $cui-button-primary-bg-color-hover;
}

@mixin button-primary-active {
    color: $cui-button-primary-color-active; // Repeated for elements that only include this mixin and not the basic primary styles
    background-color: $cui-button-primary-bg-color;
    text-shadow: $cui-button-primary-text-shadow;
}

@mixin button-icon($width: $cui-button-icon-width, $height: $cui-button-icon-height) {
    position: relative;
    display: inline-block;
    width: $width;
    height: $height;
    padding: $cui-button-icon-padding;
    margin: $cui-button-icon-margin;
    font-size: $cui-font-size;
    color: transparent;
    border: none;
    background-color: transparent;
    background-repeat: no-repeat;
    vertical-align: top;
    @include hide-text;
}


// * @section    Grid
// * @see        https://css-tricks.com/using-flexbox/
// * --------------------------------------------------------

// Parent container that will make all DIRECT children become flex items
@mixin row($wrap: $cui-grid-flex-row-wrap, $direction: false, $margin: $cui-grid-row-margin, $width: false) {
    display: -ms-flexbox;  // TWEENER - IE 10
    display: flex;         // NEW, Spec - Opera 12.1, Firefox 20+
    margin: $margin;
    @include clearfix;

    @if $width != false {
        width: $width;
    }

    @if $direction != false {
        flex-direction: $direction;
    }

    @if $wrap != false {
        flex-wrap: $wrap;
    }

    .no-flexbox & {
        @include legacy-row(null, null);
    }
}

// Child element (column) within a flex container
@mixin col($val: 0 0 auto, $width: false) {
    position: relative;
    padding: $cui-grid-column-padding;
    @include clearfix;
    min-height: $cui-grid-column-min-height;
    -ms-flex: $val;     // IE 10
        flex: $val;     // NEW, Spec - Opera 12.1, Firefox 20+
}

// Optionally override the source order of a child element
@mixin col-order($order: 1) {
    -ms-flex-order: $order; // Older syntax - IE 10
             order: $order; // NEW, Spec - Opera 12.1, Firefox 20+
}

// Standard fixed column
@mixin fixed-col() {
    float: left;
    position: relative;
    padding: $cui-grid-column-padding;
    @include clearfix;
}

// Standard inline column
@mixin inline-col() {
    display: inline-block;
    float: none;
    width: auto;
}

// Row styles for a given type and breakpoint (types: "row", "flex")
@mixin grid-row($type: "row", $breakpointName: "small") {
    @if $breakpointName == "small" {
        @if $type == "flex" {
            @include flex-row;
        }
        @else {
            @include row;
        }
    }
    @elseif $breakpointName == "medium" {
        @include pointbreak($cui-bp-medium) {
            @if $type == "flex" {
                @include flex-row;
            }
            @else {
                @include row;
            }
        }
    }
    @else {
        @include pointbreak($cui-bp-large) {
            @if $type == "flex" {
                @include flex-row;
            }
            @else {
                @include row;
            }
        }
    }
}

@mixin grid-col-fixed-helper($width: 0, $breakpointName: "small") {
    width: $width;
}

// Fixed column styles for a given width and breakpoint
@mixin grid-col-fixed($width: 0, $breakpointName: "small") {

    @if $breakpointName == "small" {
        @include grid-col-fixed-helper($width, $breakpointName);
    }
    @elseif $breakpointName == "medium" {
        @include pointbreak($cui-bp-medium) {
            @include grid-col-fixed-helper($width, $breakpointName);
        }
    }
    @else {
        @include pointbreak($cui-bp-large) {
            @include grid-col-fixed-helper($width, $breakpointName);
        }
    }
}

@mixin grid-col-flex-helper($breakpointName: "small", $width: false) {
    @if $width != false {
        @include col(0 1 $width);

        // Legacy support for non-flexbox and non-calc browsers
        // Note that this is separate than `$cui-grid-use-legacy-styles`. Even with that flag turned on you can still use flex box in supporting browsers and fall back to more basic CSS using the `.no-flexbox` class added by Modernizr.
        .no-flexbox & {
            width: calc(100% - $width);
        }

        // Flex col is to the left of the fixed col
        .no-csscalc {
            margin-right: $width;
        }

        // Flex col is to the right of the fixed col
        .no-csscalc [class*="cui-fixed-col-#{$breakpointName}"] + & {
            margin-right: auto;
            margin-left: $width;
        }
    }
    @else {
        @include col(0 1 100%);
    }
}

@mixin grid-col-flex($breakpointName: "small", $width: false) {
    @if $width != false {
        max-width: $width;
    }
    @else {
        max-width: 100%;
    }

    @if $breakpointName == "small" {
        @include grid-col-flex-helper($breakpointName, $width);
    }
    @elseif $breakpointName == "medium" {
        @include pointbreak($cui-bp-medium) {
            @include grid-col-flex-helper($breakpointName, $width);
        }
    }
    @else {
        @include pointbreak($cui-bp-large) {
            @include grid-col-flex-helper($breakpointName, $width);
        }
    }
}

@function column-width-calc($colNumber, $colTotal) {
    @return percentage($colNumber / $colTotal);
}

// Returns the helper for a single column
@mixin grid-col($numerator: 1, $denominator: $cui-grid-column-count, $size: "small") {
    @if $size == "small" {
        @include col;
        width: column-width-calc($numerator, $denominator);
    }
    @elseif $size == "medium" {
        @include pointbreak($cui-bp-medium) {
            @include col;
            width: column-width-calc($numerator, $denominator);
        }
    }
    @else {
        @include pointbreak($cui-bp-large) {
            @include col;
            width: column-width-calc($numerator, $denominator);
        }
    }
}


// * @section    Column generation
// * --------------------------------------------------------

// Generates fixed and flex classes for a given breakpoint
@mixin generate-fixed-flex-columns($breakpointName: "") {
    // Fixed & flex column layout approach:
    // Give fixed columns `width: Npx` and let them inherit `float: left`. Give flex columns `margin-left: Npx` and apply `float: none` and `width: 100%`. This works except that the flex columns are always 1 pixel taller than the fixed columns due to floats being handled differently.
    // We avoid floats using `calc()` which has good browser support but not quite 100% yet. Fixed columns are the same as above (`width: Npx`, inherit `float:left`). Flex columns use `width: calc(100% - Npx)` and no `margin-left`.

    // Fixed

    @each $size in $cui-grid-fixed-sizes {
        $x: getNumberAndUnit($size);
        $value: nth($x, 1);
        $unit: nth($x, 2);

        .cui-flex-row .cui-fixed-col-#{$breakpointName}-#{$size} {
            flex-basis: #{$value}#{$unit};
            max-width: #{$value}#{$unit};
        }
    }

    // Flexible

    .no-csscalc [class*="cui-flex-col-#{$breakpointName}"] {
        float: none;
        width: 100%;
    }

    // Automatic sizing
    .cui-flex-col-#{$breakpointName} {
        @include col(1);

        // Need to override any specific values from other breakpoints
        // For example, `<div class="cui-col-small-6 cui-flex-col-large">` would inherit 50% width from the `small` class even when the screen size is large
        flex-basis: auto;
        max-width: none;
    }

    // Specific flex sizes
    @each $size in $cui-grid-flex-sizes {
        $x: getNumberAndUnit($size);
        $value: nth($x, 1);
        $unit: nth($x, 2);

        .cui-flex-col-#{$breakpointName}-#{$size} {
            @include col(1 0 #{$value}#{$unit});

            .no-flexbox & {
                width: calc(100% - #{$value}#{$unit});
            }
        }

        .no-csscalc {
            // Flex col is to the left of the fixed col
            .cui-flex-col-#{$breakpointName}-#{$size} {
                margin-right: #{$value}#{$unit};
            }

            // Flex col is to the right of the fixed col
            [class*="cui-fixed-col-#{$breakpointName}"] + .cui-flex-col-#{$breakpointName}-#{$size} {
                margin-right: auto;
                margin-left: #{$value}#{$unit};
            }
        }
    }
}

// Breakpoint-specific utility columns that are not part of the standard N-column row/grid pattern
@mixin utility-classes($breakpointName) {
    .cui-hide-col-#{$breakpointName} {
        @include hide-voluntary;
    }

    .cui-inline-col-#{$breakpointName} {
        @include inline-col;
    }
}

// Helper method that calls the actual class-creating mixins above
// We need this because we loop through all of the breakpoints except "small" but we want to be sure we're outputting the same code for all sizes
@mixin generate-classes($breakpointName: "", $numColumns: $cui-grid-column-count, $breakpointMaxWidth: "") {
    @include generate-column($breakpointName, $numColumns, $breakpointMaxWidth);
    @include utility-classes($breakpointName);
    @include generate-fixed-flex-columns($breakpointName);
}

// Return width for a single division (column) as a percentage of the total container (row)
@function column-width-calc($colNumber, $colTotal) {
    @return percentage($colNumber / $colTotal);
}

// Generates column classes for all breakpoint sizes
@mixin generate-grid($numColumns: $cui-grid-column-count) {

    // Finally, generate the classes for each size:

    // Base (small) size -- these styles are not wrapped in a media query
    @include generate-classes("small", $numColumns, $cui-bp-medium);

    // All other sizes
    @each $b in $cui-grid-breakpoints {
        $breakpointName: nth($b, 1);
        $breakpointMinWidth: nth($b, 2);

        // Create a new media query for the breakpoint
        @include pointbreak($breakpointMinWidth) {
            // Generate classes within the media query
            @include generate-classes($breakpointName, $numColumns, $cui-bp-medium);
        }
    }
}

// Generates all of the column classes for all breakpoints
// e.g. `cui-col-small-6`, `cui-col-medium-4`, etc
@mixin generate-column($breakpointName: "", $numColumns: $cui-grid-column-count, $breakpointMaxWidth: "") {
    // Loop through each column creating the grid
    @for $i from 1 to $numColumns + 1 {
        // Percentage-based width of the column
        $width: column-width-calc($i, $numColumns);

        // Create this column number and assign it the correct width.
        .cui-col-#{$breakpointName}-#{$i} {
            flex-basis: $width;
            max-width: $width;
        }
    }

    // Loop through again, this time creating the `push` classes
    @for $i from 1 to $numColumns {
        // Percentage-based width of the column
        $width: column-width-calc($i, $numColumns);

        .cui-push-#{$breakpointName}-#{$i} {
            margin-left: $width;
        }
    }

    // Loop through again, this time creating the `pull` classes
    @for $i from 1 to $numColumns {
        // Percentage-based width of the column
        $width: column-width-calc($i, $numColumns);

        .cui-pull-#{$breakpointName}-#{$i} {
            margin-right: $width;
        }
    }
}


// * @section    Legacy column generation (no flex box)
// * --------------------------------------------------------

@mixin legacy-row($margin: $cui-grid-row-margin, $width: 100%) {
    width: $width;
    clear: both;
    @include clearfix;
    margin: $margin;
}

// Standard column
@mixin legacy-col() {
    float: left;
    position: relative;
    @include clearfix;
    min-height: $cui-grid-column-min-height;
    padding: $cui-grid-column-padding;
    // By default, use up the whole width of the row
    // E.g. a column with only a `col-large-` class should be 100% width on small and medium sized screens
    width: 100%;
}
@mixin legacy-grid-row($type: "row", $breakpointName: "small") {
    // Force the type to `row` for legacy styles
    $type: "row";

    @if $breakpointName == "small" {
        @include row;
    }
    @elseif $breakpointName == "medium" {
        @include pointbreak($cui-bp-medium) {
            @include row;
        }
    }
    @else {
        @include pointbreak($cui-bp-large) {
            @include row;
        }
    }
}

// Generates fixed and flex classes for a given breakpoint
@mixin legacy-generate-fixed-flex-columns($breakpointName: "") {
    // Fixed & flex column layout approach:
    // Give fixed columns `width: Npx` and let them inherit `float: left`. Give flex columns `margin-left: Npx` and apply `float: none` and `width: 100%`. This works except that the flex columns are always 1 pixel taller than the fixed columns due to floats being handled differently.
    // We avoid floats using `calc()` which has good browser support but not quite 100% yet. Fixed columns are the same as above (`width: Npx`, inherit `float:left`). Flex columns use `width: calc(100% - Npx)` and no `margin-left`.

    // Fixed

    @each $size in $cui-grid-fixed-sizes {
        $x: getNumberAndUnit($size);
        $value: nth($x, 1);
        $unit: nth($x, 2);

        .cui-flex-row .cui-fixed-col-#{$breakpointName}-#{$size} {
            width: #{$value}#{$unit};
        }
    }

    // Flexible

    .no-csscalc [class*="cui-flex-col-#{$breakpointName}"] {
        float: none;
        width: 100%;
    }

    // Automatic sizing
    .cui-flex-col-#{$breakpointName} {
        @include col(1);

        // Need to override any specific values from other breakpoints
        // For example, `<div class="cui-col-small-6 cui-flex-col-large">` would inherit 50% width from the `small` class even when the screen size is large
        flex-basis: auto;
        max-width: none;
    }

    // Specific flex sizes
    @each $size in $cui-grid-flex-sizes {
        $x: getNumberAndUnit($size);
        $value: nth($x, 1);
        $unit: nth($x, 2);

        .cui-flex-col-#{$breakpointName}-#{$size} {
            @include col(1 0 #{$value}#{$unit});

            .no-flexbox & {
                width: calc(100% - #{$value}#{$unit});
            }
        }

        .no-csscalc {
            // Flex col is to the left of the fixed col
            .cui-flex-col-#{$breakpointName}-#{$size} {
                margin-right: #{$value}#{$unit};
            }

            // Flex col is to the right of the fixed col
            [class*="cui-fixed-col-#{$breakpointName}"] + .cui-flex-col-#{$breakpointName}-#{$size} {
                margin-right: auto;
                margin-left: #{$value}#{$unit};
            }
        }
    }
}

// Helper method that calls the actual class-creating mixins above
// We need this because we loop through all of the breakpoints except "small" but we want to be sure we're outputting the same code for all sizes
@mixin legacy-generate-classes($breakpointName: "", $numColumns: $cui-grid-column-count, $breakpointMaxWidth: "") {
    @include generate-column($breakpointName, $numColumns, $breakpointMaxWidth);
    @include utility-classes($breakpointName);
    @include generate-fixed-flex-columns($breakpointName);
}

// Return width for a single division (column) as a percentage of the total container (row)
@function column-width-calc($colNumber, $colTotal) {
    @return percentage($colNumber / $colTotal);
}

// Generates column classes for all breakpoint sizes
@mixin legacy-generate-grid($numColumns: $cui-grid-column-count) {

    // Finally, generate the classes for each size:

    // Base (small) size -- these styles are not wrapped in a media query
    @include generate-classes("small", $numColumns, $cui-bp-medium);

    // All other sizes
    @each $b in $cui-grid-breakpoints {
        $breakpointName: nth($b, 1);
        $breakpointMinWidth: nth($b, 2);

        // Create a new media query for the breakpoint
        @include pointbreak($breakpointMinWidth) {
            // Generate classes within the media query
            @include generate-classes($breakpointName, $numColumns, $cui-bp-medium);
        }
    }
}

// Generates all of the column classes for all breakpoints
// e.g. `cui-col-small-6`, `cui-col-medium-4`, etc
@mixin legacy-generate-column($breakpointName: "", $numColumns: $cui-grid-column-count, $breakpointMaxWidth: "") {
    // Loop through each column creating the grid
    @for $i from 1 to $numColumns + 1 {
        // Percentage-based width of the column
        $width: column-width-calc($i, $numColumns);

        // Create this column number and assign it the correct width.
        .cui-col-#{$breakpointName}-#{$i} {
            width: $width;
        }

        @if $breakpointMaxWidth != "" {
            @if $i == 6 {
                // Make sure every column that begins a new "row" clears the elements before it.
                // E.g. if there are four cols inside a row, and the first col is tall, the third col would not wrap down to a new line as intended
                // We're using `max-width` media query so it doesn't affect a `.cui-col-small-6.cui-col-medium-*` element in a larger viewport
                //TODO: Copy this practice for other classes (e.g. every 4th col-small-4 should wrap to a new line)
                //FIXME: This currently only generates for the small (no-MQ) breakpoint
                @include pointbreak($breakpointMaxWidth, true) {
                    .cui-col-#{$breakpointName}-#{$i}:nth-child(2n+3) {
                        clear: both;
                    }
                }
            }
        }
    }

    // Loop through again, this time creating the `push` classes
    @for $i from 1 to $numColumns {
        // Percentage-based width of the column
        $width: column-width-calc($i, $numColumns);

        .cui-push-#{$breakpointName}-#{$i} {
            margin-left: $width;
        }
    }

    // Loop through again, this time creating the `pull` classes
    @for $i from 1 to $numColumns {
        // Percentage-based width of the column
        $width: column-width-calc($i, $numColumns);

        .cui-pull-#{$breakpointName}-#{$i} {
            margin-right: $width;
        }
    }
}

@mixin legacy-grid-col-flex($breakpointName: "small", $width: false) {
    @if $breakpointName == "small" {
        @include grid-col-flex-helper($breakpointName, $width);
    }
    @elseif $breakpointName == "medium" {
        @include pointbreak($cui-bp-medium) {
            @include grid-col-flex-helper($breakpointName, $width);
        }
    }
    @else {
        @include pointbreak($cui-bp-large) {
            @include grid-col-flex-helper($breakpointName, $width);
        }
    }
}


// * @section    Breakpoints
// * --------------------------------------------------------
// Breakpoint wrapper
@mixin pointbreak($size: $cui-bp-medium, $max: false, $media: "") {
    // Hi-res or retina only
    @if $size == "hires" {
        @media only screen and (-webkit-min-device-pixel-ratio: 1.5), only screen and (min-resolution: 192dpi) { @content; }
    }
    // All other media
    @else {
        // Standard mobile-first `min-width` MQ
        @if $max == false {
            @if $media != "" {
                @media #{$media} and (min-width: $size) { @content; }
            }
            @else {
                // Also include a `print` MQ for medium and large styles so that prints use the desktop styles
                @if ($print-using-large-styles == true and ($size == $cui-bp-medium or $size == $cui-bp-large)) {
                    @media print, (min-width: $size) { @content; }
                }
                @else {
                    @media (min-width: $size) { @content; }
                }
            }
        }
        // Desktop-first `max-width` MQ
        @else {
            @if $media != "" {
                @media #{$media} and (max-width: $size) { @content; }
            }
            @else {
                // Exclude `print` so we don't apply mobile styles to prints
                @if $print-using-large-styles == true {
                    @media only screen and (max-width: $size) { @content; }
                }
                @else {
                    @media (max-width: $size) { @content; }
                }
            }
        }
    }
}


// * @section    Pixel to em conversion utility
// * --------------------------------------------------------
@function pxToem($px, $base: $cui-font-size) {
    @return ($px / $base) * 1em;
}

// Returns the unit from a value ("22px" -> "px")
// Same as the native `unit()` method but it converts "pc" to "%"
@function getUnit($val: "") {

    $unit: "";

    // Make sure we're working with a string before checking the units
    $str: quote($val);

    @if str-index($str, "pc") {
        $unit: "%";
    }
    @else {
        $unit: unit($val);
    }

    @return $unit;
}

// Get numeric value from a string ("10.4px" -> 10.4)
// Adopted and slightly modified from http://hugogiraudel.com/2014/01/15/sass-string-to-number/
@function toNumber($string) {
    // Make sure it's actually a string so the string methods below don't fail
    $string: quote($string);

    // Matrices
    $strings: '0' '1' '2' '3' '4' '5' '6' '7' '8' '9';
    $numbers:  0   1   2   3   4   5   6   7   8   9;

    // Result
    $result: 0;
    $divider: 0;
    $minus: false;

    // Looping through all characters
    @for $i from 1 through str-length($string) {
        $character: str-slice($string, $i, $i);
        $index: index($strings, $character);

        @if $character == '-' {
            $minus: true;
        }

        @else if $character == '.' {
            $divider: 1;
        }

        @else {
            @if not $index {
                $result: if($minus, $result * -1, $result);

                @return $result; // getLength($result, str-slice($string, $i));
            }

            $number: nth($numbers, $index);

            @if $divider == 0 {
                $result: $result * 10;
            }
            @else {
                // Move the decimal dot to the left
                $divider: $divider * 10;
                $number: $number / $divider;
            }

            $result: $result + $number;
        }
    }

    @return if($minus, $result * -1, $result);
}

// Returns the numeric value and unit of a string as an array
// Similar to calling both `toNumber` and `getUnit` at once
// Also "fixes" the values 33, 66, and 67 to have repeating decimals so they become true thirds
@function getNumberAndUnit($x) {
    $unit: getUnit($x);
    $value: toNumber($x);

    // Handle special values that should have repeating units
    @if $value == 33 {
        $value: (1 / 3) * 100;
    }
    @elseif $value == 67 or $value == 66 {
        $value: (2 / 3) * 100;
    }

    @return ($value, $unit);
}

@mixin required-asterisk() {
    content: "*";
    color: $cui-color-required-red;
    font: $cui-font-required;
    font-weight: $cui-font-weight-semibold;
    position: absolute;
    right: -3px;
    top: 2px;
}

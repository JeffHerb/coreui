//   ========================================================
// * @name       _grid.scss
// * @desc       Responsive grid styles
// * @author     Manolo Farfan, Craig Patik
// * @version    1.0.0.20141231
// * @see        https://github.com/ny/frg-coreui
//   ========================================================


// * @section    Row and col structures
// * @desc       The grid's row and columns (default cols 12)
// *             - Fluid & fixed + fluid layouts with fillers
// *             - Clearfix to force new row
// * --------------------------------------------------------
.cui-row {
    @include row;
}

[class*="cui-col-"] {
    min-height: 1.5em;
}

[class*="cui-col-small-"],
[class*="cui-fixed-col-"] {
    float: left;
}

[class*="cui-col-"],
[class*="cui-fixed-col-"],
[class*="cui-filler-col-"] {
    position: relative;
    overflow: hidden;
    @include clearfix;
}

[class*="cui-col-"],
[class*="cui-fixed-col-"],
[class*="cui-filler-col-"],
section > header,
nav > header {
    padding: $cui-grid-column-padding;
}

.cui-filler-col-small {
    float: none;
    width: auto;
    overflow: hidden;
}

.cui-row,
[class*="cui-filler-col-"],
.cui-clearfix {
    @include clearfix;
}

.cui-hide-col-small {
    @include hide-voluntary;
}

.cui-inline-col-small {
    display: inline-block;
    float: none;
    width: auto;
}

// * @section    Column generation
// * --------------------------------------------------------

@function column-width-calc($colNumber, $colTotal) {
    @return percentage($colNumber / $colTotal);
}

@mixin build-grids($totalColumns: $cui-grid-column-count) {
    $breakpoints: (
        ("medium" $cui-bp-medium),
        ("large" $cui-bp-large)
    );

    @function column-width-calc($colNumber, $colTotal) {
        @return percentage($colNumber / $colTotal);
    }

    // Base (small) size -- these classes are not wrapped in a media query
    @include create-column("small", $totalColumns, $cui-bp-medium);

    // All other sizes
    @each $b in $breakpoints {
        $point: nth($b, 1);
        $min: nth($b, 2);

        // Create a new media query for the breakpoint
        @include pointbreak($min) {
            // Generate classes within the media query
            @include create-column($point, $totalColumns);
        }
    }
}

@mixin create-column($point: "", $totalColumns: $cui-grid-column-count, $min: "") {
    // Loop through each column creating the grid
    @for $i from 1 to $totalColumns + 1 {

        // Create this column number and assign it the correct width.
        .cui-col-#{$point}-#{$i} {
            width: column-width-calc($i, $totalColumns);
        }

        @if $min != "" {
            @if $i == 6 {
                // Make sure every column that begins a new "row" clears the elements before it.
                // E.g. if there are four cols inside a row, and the first col is tall, the third col would not wrap down to a new line as intended
                // We're using `max-width` media query so it doesn't affect a `.cui-col-small-6.cui-col-medium-*` element in a larger viewport
                //TODO: Copy this practice for other classes (e.g. every 4th col-small-4 should wrap to a new line)
                //FIXME: This currently only generates for the small (no-MQ) breakpoint
                @include pointbreak($min, true) {
                    .cui-col-#{$point}-#{$i}:nth-child(2n+3) {
                        clear: both;
                    }
                }
            }
        }
    }

    // Loop through again this time creating the `push` classes
    @for $i from 1 to $totalColumns {
        .cui-push-#{$point}-#{$i} {
            margin-left: column-width-calc($i, $totalColumns);
        }
    }

    // Loop through again this time creating the `pull` classes
    @for $i from 1 to $totalColumns {
        .cui-pull-#{$point}-#{$i} {
            margin-right: column-width-calc($i, $totalColumns);
        }
    }
}

// Generate the grid and column classes
@include build-grids($cui-grid-column-count);


// * @section    Tablet (medium) column widths
// * --------------------------------------------------------
@media only screen and (min-width:$cui-bp-medium) {
    [class*="cui-col-medium-"] {
        float: left;
    }

    .cui-filler-col-medium {
        float: none;
        width: auto;
        overflow: hidden;
    }

    .cui-hide-col-medium {
        @include hide-voluntary;
    }

    .cui-hide-col-small, .cui-hide-col-large {
        display: block;
    }

    .cui-inline-col-medium {
        display: inline-block;
        float: none;
        width: auto;
    }

    [class$="medium-200"] {
        width: 200px;
    }
}


// * @section    Desktop (large) column widths
// * --------------------------------------------------------
@media only screen and (min-width:$cui-bp-large) {
    [class*="cui-col-large-"] {
        float: left;
    }

    .cui-filler-col-large {
        float: none;
        width: auto;
        overflow: hidden;
    }

    .cui-hide-col-large {
        @include hide-voluntary;
    }

    .cui-hide-col-small, .cui-hide-col-medium {
        display: block;
    }

    .cui-inline-col-large {
        display: inline-block;
        float: none;
        width: auto;
    }
}


// * @section    Push columns
// * --------------------------------------------------------
.cui-push-right {
    float: right;
}
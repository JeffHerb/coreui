//   ========================================================
// * @name       _utilities/_mixins_grid.scss
// * @desc       Sass mixins
// * @see        https://github.com/ny/coreui
//   ========================================================


// * @section    Grid
// * @see        https://css-tricks.com/using-flexbox/
// * --------------------------------------------------------

// Standard row styles
@mixin row($wrap: $cui-grid-flex-row-wrap, $direction: row, $margin: $cui-grid-row-margin, $width: false) {
    display: flex;
    margin: $margin;
    flex: 0 1 auto;

    @include clearfix;

    @if $width != false {
        width: $width;
    }

    @if $direction != false {
        @if $direction == row {
            -webkit-box-orient: horizontal;
            -webkit-box-direction: normal;
        }

        -ms-flex-direction: $direction;
        flex-direction: $direction;
    }

    @if $wrap != false {
        -ms-flex-wrap: $wrap;
        flex-wrap: $wrap;
    }
}

// Standard column styles
@mixin col($flexShorthandValue: 0 0 auto) {
    flex: $flexShorthandValue;
    position: relative;
    @include clearfix;
    padding: $cui-grid-column-padding;
    min-height: $cui-grid-column-min-height;
}

// Standard fixed column
@mixin fixed-col() {
    // float: left;
    position: relative;
    padding: $cui-grid-column-padding;
    @include clearfix;
}

// Standard inline column
@mixin inline-col() {
    display: inline-block;
    float: none;
    width: auto;
}

@mixin grid-row($breakpointName: "small") {
    @warn "The `grid-row` mixin is deprecated. Instead, wrap `@include row` with the appropriate media query";

    @if $breakpointName == "small" {
        @include row;
    }
    @elseif $breakpointName == "medium" {
        @include pointbreak($cui-bp-medium) {
            @include row;
        }
    }
    @else {
        @include pointbreak($cui-bp-large) {
            @include row;
        }
    }
}

// Fixed column styles for a given width and breakpoint
@mixin grid-col-fixed($width: 0, $breakpointName: "small") {
    @if $breakpointName == "small" {
        width: $width;
    }
    @elseif $breakpointName == "medium" {
        @include pointbreak($cui-bp-medium) {
            width: $width;
        }
    }
    @else {
        @include pointbreak($cui-bp-large) {
            width: $width;
        }
    }
}

@mixin grid-col-flex($breakpointName: "small", $width: 100%) {
    max-width: $width;

    @if $breakpointName == "small" {
        @include col(0 1 $width);
    }
    @elseif $breakpointName == "medium" {
        @include pointbreak($cui-bp-medium) {
            @include col(0 1 $width);
        }
    }
    @else {
        @include pointbreak($cui-bp-large) {
            @include col(0 1 $width);
        }
    }
}

@function column-width-calc($colNumber, $colTotal) {
    @return percentage($colNumber / $colTotal);
}

// Returns the helper for a single column
@mixin grid-col($numerator: 1, $denominator: $cui-grid-column-count, $breakpointName: "small") {
    @if $breakpointName == "small" {
        @include col;
        width: column-width-calc($numerator, $denominator);
    }
    @elseif $breakpointName == "medium" {
        @include pointbreak($cui-bp-medium) {
            @include col;
            width: column-width-calc($numerator, $denominator);
        }
    }
    @else {
        @include pointbreak($cui-bp-large) {
            @include col;
            width: column-width-calc($numerator, $denominator);
        }
    }
}


// * @section    Column generation
// * --------------------------------------------------------

// Generates fixed and flex classes for a given breakpoint
@mixin generate-fixed-flex-columns($breakpointName) {
    // Fixed & flex column layout approach:
    // Give fixed columns `width: Npx` and let them inherit `float: left`. Give flex columns `margin-left: Npx` and apply `float: none` and `width: 100%`. This works except that the flex columns are always 1 pixel taller than the fixed columns due to floats being handled differently.
    // We avoid floats using `calc()` which has good browser support but not quite 100% yet. Fixed columns are the same as above (`width: Npx`, inherit `float:left`). Flex columns use `width: calc(100% - Npx)` and no `margin-left`.

    // Fixed:

    @each $size in $cui-grid-fixed-sizes {
        $x: getNumberAndUnit($size);
        $value: nth($x, 1);
        $unit: nth($x, 2);

        .cui-fixed-col-#{$breakpointName}-#{$size} {
            @include col(0 1 #{$value}#{$unit});
            max-width: #{$value}#{$unit};
        }
    }

    // Flexible:

    // // Automatic sizing
    // .cui-col-#{$breakpointName} {
    //     @include col(1 0 auto);

    //     // Need to override any specific values from other breakpoints
    //     // For example, `<div class="cui-col-small-6 cui-col-large">` would inherit 50% width from the `small` class even when the screen size is large
    //     flex-basis: auto;
    //     max-width: none;
    // }

    // Specific flex sizes
    @each $size in $cui-grid-flex-sizes {
        $x: getNumberAndUnit($size);
        $value: nth($x, 1);
        $unit: nth($x, 2);

        .cui-col-#{$breakpointName}-#{$size} {
            @include col(1 0 #{$value}#{$unit});
        }
    }
}

// Breakpoint-specific utility columns that are not part of the standard N-column row/grid pattern
@mixin utility-classes($breakpointName) {
    .cui-hide-col-#{$breakpointName} {
        @include hide-voluntary;
    }

    .cui-inline-col-#{$breakpointName} {
        @include inline-col;
    }
}

// Helper method that calls the actual class-creating mixins above
// We need this because we loop through all of the breakpoints except "small" but we want to be sure we're outputting the same code for all sizes
@mixin generate-classes($breakpointName: "", $numColumns: $cui-grid-column-count, $breakpointMaxWidth: "") {
    @include generate-column($breakpointName, $numColumns, $breakpointMaxWidth);
    @include utility-classes($breakpointName);
    @include generate-fixed-flex-columns($breakpointName);
}

// Return width for a single division (column) as a percentage of the total container (row)
@function column-width-calc($colNumber, $colTotal) {
    @return percentage($colNumber / $colTotal);
}

// Generates column classes for all breakpoint sizes
@mixin generate-grid($numColumns: $cui-grid-column-count) {

    // Finally, generate the classes for each size:

    // Base (small) size -- these styles are not wrapped in a media query
    @include generate-classes("small", $numColumns, $cui-bp-medium);

    // All other sizes
    @each $b in $cui-grid-breakpoints {
        $breakpointName: nth($b, 1);
        $breakpointMinWidth: nth($b, 2);

        // Create a new media query for the breakpoint
        @include pointbreak($breakpointMinWidth) {
            // Generate classes within the media query
            @include generate-classes($breakpointName, $numColumns, $cui-bp-medium);
        }
    }
}

// Generates all of the column classes for all breakpoints
// e.g. `cui-col-small-6`, `cui-col-medium-4`, etc
@mixin generate-column($breakpointName: "", $numColumns: $cui-grid-column-count, $breakpointMaxWidth: "") {
    // Loop through each column creating the grid
    @for $i from 1 to $numColumns + 1 {
        // Percentage-based width of the column
        $width: column-width-calc($i, $numColumns);

        // Create this column number and assign it the correct width.
        .cui-col-#{$breakpointName}-#{$i} {
            flex-basis: $width;
            max-width: $width;
        }
    }

    // Loop through again, this time creating the `push` classes
    @for $i from 1 to $numColumns {
        // Percentage-based width of the column
        $width: column-width-calc($i, $numColumns);

        .cui-push-#{$breakpointName}-#{$i} {
            margin-left: $width;
        }
    }

    // Loop through again, this time creating the `pull` classes
    @for $i from 1 to $numColumns {
        // Percentage-based width of the column
        $width: column-width-calc($i, $numColumns);

        .cui-pull-#{$breakpointName}-#{$i} {
            margin-right: $width;
        }
    }
}

//   ========================================================
// * @name       _utilities/_mixins.scss
// * @desc       sass mixins
// * @author     Manolo Farfan, Craig Patik
// * @version    1.0.0.20150204
// * @see        https://github.com/ny/frg-coreui
//   ========================================================


// * @section    General
// * --------------------------------------------------------
@mixin no-padding-margin {
    padding: 0;
    margin: 0;
}

@mixin input-shadow {
    box-shadow: rgba(0, 0, 0, 0.1) 0 1px 1px 0 inset;
}

@mixin transition($val...) {
    -webkit-transition: $val;
            transition: $val;
}

@mixin transform($val) {
    -webkit-transform: $val;
        -ms-transform: $val;
            transform: $val;
}

@mixin clearfix {
    &:after {
       content: "";
       display: table;
       clear: both;
    }
}

// Hide item but let it be overriden if needed
@mixin hide-voluntary {
    display: none;
}

// Force an item to be completely hidden
@mixin hide-forced {
    display: none !important;
}

// Hide an element in place. Try to use this as much as possible
// (rather than `hide-off-screen`) because it won't cause side
// effects with the viewport and doesn't resort to hacks
@mixin hide {
    display: block !important;
    position: absolute !important;
    clip: rect(0, 0, 0, 0) !important;
    clip: rect(0 0 0 0) !important;
}

// Hide an element by pushing it out of the viewport, to the left
// This is necessary in some cases where the element may change
// state and cause undesirable side effects. For example, if you
// used `hide` on an input field, tapping on its label in Android
// would cause an odd, seamingly misplaced blue flash as the input
// temporarily gained focus.
// Note that this may cause performance issues due to some
// browsers considering the page to be 9999em wide, thereby using
// more memory for visual rendering.
@mixin hide-alternate {
    display: block !important;
    position: absolute !important;
    left: -9999em !important;
    top: 0 !important;
}

// Hides the inner text of an element (e.g. for icons)
@mixin hide-text {
    text-indent: 100%;
    white-space: nowrap;
    overflow: hidden;
}

// // Force an element to be displayed
// @mixin show-forced($class) {
//     // Only render if a class was provided
//     @if $dir != "" {
//         // Default display type (inherit from parent)
//         .#{$class} {
//             display: inherit !important;
//         }

//         // Inline elements
//         span.#{$class},
//         a.#{$class} {
//             display: inline !important;
//         }

//         // List elements
//         li.#{$class} {
//             display: list-item !important;
//         }

//         // Inline blocks
//         input.#{$class},
//         button.#{$class},
//         select.#{$class},
//         textarea.#{$class} {
//             display: inline-block !important;
//         }
//     }
// }

@mixin box-sizing($val: border-box) {
    -moz-box-sizing: $val;
         box-sizing: $val;
}

// Simple 2-color gradient
@mixin vertical-gradient($top: transparent, $bottom: transparent) {
    background-image: -webkit-linear-gradient(top, $top, $bottom);
    background-image:         linear-gradient(to bottom, $top, $bottom);
}

// Gradient with more than 2 color stops
@mixin vertical-gradient-multiple($val...) {
    background-image: -webkit-linear-gradient($val);
    background-image:         linear-gradient($val);
}

// Enable GPU acceleration when available. Use only on
// animated/transitioned elements (rather than `<body>`
// or other large containers)
@mixin enable-gpu {
    -webkit-backface-visibility: hidden;
    -ms-transform: translate3d(0, 0, 0);
}

@mixin animation($value) {
    @include enable-gpu;
    -webkit-animation: $value;
            animation: $value;
}

// Prevent the user from selecting text
// http://caniuse.com/user-select-none
@mixin user-select($type: none) {
    -webkit-user-select: $type;
       -moz-user-select: $type;
        -ms-user-select: $type;
            user-select: $type;
}

@mixin hyphenation($type: auto) {
    // http://caniuse.com/css-hyphens
    -webkit-hyphens: $type;
       -moz-hyphens: $type;
        -ms-hyphens: $type;
            hyphens: $type;
}


// * @section    Sticky positioning
// * --------------------------------------------------------
// Must specify a `top` value and no parent may have `overflow: hidden`
@mixin position-sticky {
    position: -webkit-sticky;
    position:         sticky;
}


// * @section    Triangle ◄ ▲ ► ▼
// * @see        http://css-tricks.com/snippets/css/css-triangle/
// * --------------------------------------------------------
// To make equilateral:
// border-bottom-width = 0.866% * (border-left-width + border-right-width)
@mixin triangle($dir: "down", $size: 10px, $color: black) {
    width: 0;
    height: 0;

    @if $dir == "up" {
        border-bottom: $size solid $color;
        border-left:   $size solid transparent;
        border-right:  $size solid transparent;
        border-top:  none;
    }
    @elseif $dir == "right" {
        border-left:   $size solid $color;
        border-top:    $size solid transparent;
        border-bottom: $size solid transparent;
        border-right:  none;
    }
    @elseif $dir == "left" {
        border-right:  $size solid $color;
        border-top:    $size solid transparent;
        border-bottom: $size solid transparent;
        border-left:  none;
    }
    @else {
        border-top:   $size solid $color;
        border-left:  $size solid transparent;
        border-right: $size solid transparent;
        border-bottom:  none;
    }
}

// Standard button style
@mixin button {
    color: $cui-color-dark-gray;
    border: $cui-input-border;
    border-radius: $cui-border-radius;
    margin: 0;
    text-decoration: none;
    font-size: $cui-input-font-size;
    font-weight: $cui-input-font-weight;
    background-color: $cui-input-bg-hover-color;
    text-shadow: $cui-button-text-shadow;
    white-space: nowrap;
    -webkit-font-smoothing: none;
}

@mixin button-primary {
    color: $cui-color-white;
    border: $cui-button-primary-border;
    background-color: $cui-button-primary-bg-color;
    text-shadow: $cui-button-primary-text-shadow;
    -webkit-font-smoothing: none;

    &:hover {
        @include button-primary-hover;
    }

    &:active {
        @include button-primary-active;
    }
}

@mixin button-primary-hover {
    color: $cui-color-white; // Repeated for elements that only include this mixin and not the basic primary styles
    border-color: $cui-button-primary-border-hover-color;
    background-color: $cui-button-primary-bg-hover-color;
}

@mixin button-primary-active {
    color: $cui-color-white; // Repeated for elements that only include this mixin and not the basic primary styles
    background-color: $cui-button-primary-bg-color;
    text-shadow: $cui-button-primary-text-shadow;
}


// * @section    Grid
// * --------------------------------------------------------
@mixin row($margin: $cui-grid-row-margin, $width: 100%) {
    width: $width;
    clear: both;
    margin: $margin;
    @include clearfix;
}

@function column-width-calc($colNumber, $colTotal) {
    @return percentage($colNumber / $colTotal);
}

// Returns the styles for a single column
@mixin grid-column($numerator: 1, $denominator: $cui-grid-column-count, $size: "small") {
    @if $size == "small" {
        // Don't use a media query for the base size because IE8 won't see it
        width: column-width-calc($numerator, $denominator);
    }
    @elseif $size == "medium" {
        width: 100%;

        @include pointbreak($cui-bp-medium) {
            width: column-width-calc($numerator, $denominator);
        }

        @include pointbreak($cui-bp-large) {
            width: 100%;
        }
    }
    @else {
        // Large
        width: 100%;

        @include pointbreak($cui-bp-large) {
            width: column-width-calc($numerator, $denominator);
        }
    }
}


// * @section    Flexbox integration
// * @see        https://css-tricks.com/using-flexbox/
// * --------------------------------------------------------
// Not supported by IE 8 and IE 9
// Parent container that will make all DIRECT children become flex items
@mixin flex-row {
    display: -webkit-box;  // OLD - iOS 6-, Safari 3.1-6
    display: -moz-box;     // OLD - Firefox 19- (buggy but mostly works)
    display: -ms-flexbox;  // TWEENER - IE 10
    display: -webkit-flex; // NEW - Chrome
    display: flex;         // NEW, Spec - Opera 12.1, Firefox 20+
}

// Child element (column) within a flex container
@mixin flex-col($val: 1, $width: false) {
    -webkit-box-flex: $val; // OLD - iOS 6-, Safari 3.1-6
       -moz-box-flex: $val; // OLD - Firefox 19-

    @if $width != false {
        width: $width;      // For old syntax, otherwise collapses.
    }

    -webkit-flex: $val;     // Chrome
        -ms-flex: $val;     // IE 10
            flex: $val;     // NEW, Spec - Opera 12.1, Firefox 20+
}

// Optionally override the source order of a child element
@mixin flex-col-order($order: 1) {
    -webkit-box-ordinal-group: $order; // OLD - iOS 6-, Safari 3.1-6
       -moz-box-ordinal-group: $order; // OLD - Firefox 19-

    -ms-flex-order: $order;            // TWEENER - IE 10

     -webkit-order: $order;            // NEW - Chrome
             order: $order;            // NEW, Spec - Opera 12.1, Firefox 20+
}


// * @section    Breakpoints
// * --------------------------------------------------------
// Breakpoint wrapper
@mixin pointbreak($size: "", $max: false) {
    @if $size == "" {
        $size: $cui-bp-medium;
    }

    @if $size == hires {
        @media only screen and (-webkit-min-device-pixel-ratio: 1.5), only screen and (min-resolution: 192dpi) { @content; }
    }
    @elseif $max == false {
        @media (min-width: $size) { @content; }
    }
    @else {
        @media (max-width: $size) { @content; }
    }
}


// * @section    Pixel to em conversion utility
// * --------------------------------------------------------
@function pxToem($px, $base: $cui-font-size) {
    @return ($px / $base) * 1em;
}

// Returns the unit from a value ("22px" -> "px")
// Same as the native `unit()` method but it converts "pc" to "%"
@function getUnit($val: "") {
    // Make sure we're working with a string before checking the units
    $str: quote($val);

    @if str-index($str, "pc") {
        $unit: "%";
    }
    @else {
        $unit: unit($val);
    }

    @return $unit;
}

// Get numeric value from a string ("10.4px" -> 10.4)
// Adopted and slightly modified from http://hugogiraudel.com/2014/01/15/sass-string-to-number/
@function toNumber($string) {
    // Make sure it's actually a string so the string methods below don't fail
    $string: quote($string);

    // Matrices
    $strings: '0' '1' '2' '3' '4' '5' '6' '7' '8' '9';
    $numbers:  0   1   2   3   4   5   6   7   8   9;

    // Result
    $result: 0;
    $divider: 0;
    $minus: false;

    // Looping through all characters
    @for $i from 1 through str-length($string) {
        $character: str-slice($string, $i, $i);
        $index: index($strings, $character);

        @if $character == '-' {
            $minus: true;
        }

        @else if $character == '.' {
            $divider: 1;
        }

        @else {
            @if not $index {
                $result: if($minus, $result * -1, $result);

                @return $result; // getLength($result, str-slice($string, $i));
            }

            $number: nth($numbers, $index);

            @if $divider == 0 {
                $result: $result * 10;
            }
            @else {
                // Move the decimal dot to the left
                $divider: $divider * 10;
                $number: $number / $divider;
            }

            $result: $result + $number;
        }
    }

    @return if($minus, $result * -1, $result);
}

// Returns the numeric value and unit of a string as an array
// Similar to calling both `toNumber` and `getUnit` at once
// Also "fixes" the values 33, 66, and 67 to have repeating decimals so they become true thirds
@function getNumberAndUnit($x) {
    $unit: getUnit($x);
    $value: toNumber($x);

    // Handle special values that should have repeating units
    @if $value == 33 {
        $value: (1 / 3) * 100;
    }
    @elseif $value == 67 or $value == 66 {
        $value: (2 / 3) * 100;
    }

    @return ($value, $unit);
}
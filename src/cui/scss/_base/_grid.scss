//   ========================================================
// * @name       _grid.scss
// * @desc       Responsive grid styles
// * @author     Manolo Farfan, Craig Patik
// * @version    1.0.0.20141231
// * @see        https://github.com/ny/frg-coreui
//   ========================================================


// * @section    Row and col structures
// * @desc       The grid's row and columns (default cols 12)
// *             - Fluid & fixed + fluid layouts with flexes
// *             - Clearfix to force new row
// * --------------------------------------------------------
.cui-row {
    @include row;
}

.cui-flex-row {
    @include flex-row;
}

[class*="cui-col-"] {
    @include col;
}

[class*="cui-fixed-col-"] {
    @include fixed-col;
}

section > header,
nav > header {
    padding: $cui-grid-column-padding;
}

.cui-clearfix {
    @include clearfix;
}

// Flex box shorthand classes
// These give all columns equal width with their siblings without having to specify a breakpoint or number.
// Only supported in modern (flex-box-supportive) browsers. Has no effect in older browsers.
.cui-col,
.cui-col-small {
    @include flex-col(1);
}

// Use these breakpoint-specific classes to restrict the behavior
// For example, `<div class="cui-col-small-12 cui-col-medium">` will be full-width (stacked) on small screens and equal-width on medium screens
@include pointbreak($cui-bp-medium) {
    .cui-col-medium {
        @include flex-col(1);
    }
}

@include pointbreak($cui-bp-large) {
    .cui-col-large {
        @include flex-col(1);
    }
}

// * @section    Column generation
// * --------------------------------------------------------

// Generates fixed and flex classes for a given breakpoint
@mixin generate-fixed-flex-columns($breakpointName: "") {
    // Fixed & flex column layout approach:
    // Give fixed columns `width: Npx` and let them inherit `float: left`. Give flex columns `margin-left: Npx` and apply `float: none` and `width: 100%`. This works except that the flex columns are always 1 pixel taller than the fixed columns due to floats being handled differently.
    // We avoid floats using `calc()` which has good browser support but not quite 100% yet. Fixed columns are the same as above (`width: Npx`, inherit `float:left`). Flex columns use `width: calc(100% - Npx)` and no `margin-left`.

    // Fixed

    @each $size in $cui-grid-fixed-sizes {
        $x: getNumberAndUnit($size);
        $value: nth($x, 1);
        $unit: nth($x, 2);

        .cui-flex-row .cui-fixed-col-#{$breakpointName}-#{$size} {
            // Flex box styles
            @if $cui-grid-use-legacy-styles == false {
                flex-basis: #{$value}#{$unit};
                max-width: #{$value}#{$unit};
            }
            // Legacy styles
            @else {
                width: #{$value}#{$unit};
            }
        }
    }

    // Flexible

    .no-csscalc [class*="cui-flex-col-#{$breakpointName}"] {
        float: none;
        width: 100%;
    }

    // Automatic sizing
    .cui-flex-col-#{$breakpointName} {
        @include flex-col(1);
    }

    // Specific flex sizes
    @each $size in $cui-grid-flex-sizes {
        $x: getNumberAndUnit($size);
        $value: nth($x, 1);
        $unit: nth($x, 2);

        .cui-flex-col-#{$breakpointName}-#{$size} {
            @include flex-col(1 0 #{$value}#{$unit});

            .no-flexbox & {
                width: calc(100% - #{$value}#{$unit});
            }
        }

        .no-csscalc {
            // Flex col is to the left of the fixed col
            .cui-flex-col-#{$breakpointName}-#{$size} {
                margin-right: #{$value}#{$unit};
            }

            // Flex col is to the right of the fixed col
            [class*="cui-fixed-col-#{$breakpointName}"] + .cui-flex-col-#{$breakpointName}-#{$size} {
                margin-right: auto;
                margin-left: #{$value}#{$unit};
            }
        }
    }
}

// Generates column classes for all breakpoint sizes
@mixin generate-grid($numColumns: $cui-grid-column-count) {
    // Return width for a single division (column) as a percentage of the total container (row)
    @function column-width-calc($colNumber, $colTotal) {
        @return percentage($colNumber / $colTotal);
    }

    // Breakpoint-specific utility columns that are not part of the standard N-column row/grid pattern
    @mixin utility-classes($breakpointName) {
        .cui-hide-col-#{$breakpointName} {
            @include hide-voluntary;
        }

        .cui-inline-col-#{$breakpointName} {
            @include inline-col;
        }
    }

    // Helper method that calls the actual class-creating mixins above
    // We need this because we loop through all of the breakpoints except "small" but we want to be sure we're outputting the same code for all sizes
    @mixin generate-classes($breakpointName: "", $numColumns: $cui-grid-column-count, $breakpointMaxWidth: "") {
        @include generate-column($breakpointName, $numColumns, $breakpointMaxWidth);
        @include utility-classes($breakpointName);
        @include generate-fixed-flex-columns($breakpointName);
    }

    // Finally, generate the classes for each size:

    // Base (small) size -- these styles are not wrapped in a media query
    @include generate-classes("small", $numColumns, $cui-bp-medium);

    // All other sizes
    @each $b in $cui-grid-breakpoints {
        $breakpointName: nth($b, 1);
        $breakpointMinWidth: nth($b, 2);

        // Create a new media query for the breakpoint
        @include pointbreak($breakpointMinWidth) {
            // Generate classes within the media query
            @include generate-classes($breakpointName, $numColumns, $cui-bp-medium);
        }
    }
}

// Generates all of the column classes for all breakpoints
// e.g. `cui-col-small-6`, `cui-col-medium-4`, etc
@mixin generate-column($breakpointName: "", $numColumns: $cui-grid-column-count, $breakpointMaxWidth: "") {
    // Loop through each column creating the grid
    @for $i from 1 to $numColumns + 1 {
        // Percentage-based width of the column
        $width: column-width-calc($i, $numColumns);

        // Create this column number and assign it the correct width.
        .cui-col-#{$breakpointName}-#{$i} {
            // Flex box styles
            @if $cui-grid-use-legacy-styles == false {
                flex-basis: $width;
                max-width: $width;
            }
            // Legacy styles
            @else {
                width: $width;
            }
        }

        @if $cui-grid-use-legacy-styles {
            @if $breakpointMaxWidth != "" {
                @if $i == 6 {
                    // Make sure every column that begins a new "row" clears the elements before it.
                    // E.g. if there are four cols inside a row, and the first col is tall, the third col would not wrap down to a new line as intended
                    // We're using `max-width` media query so it doesn't affect a `.cui-col-small-6.cui-col-medium-*` element in a larger viewport
                    //TODO: Copy this practice for other classes (e.g. every 4th col-small-4 should wrap to a new line)
                    //FIXME: This currently only generates for the small (no-MQ) breakpoint
                    @include pointbreak($breakpointMaxWidth, true) {
                        .cui-col-#{$breakpointName}-#{$i}:nth-child(2n+3) {
                            clear: both;
                        }
                    }
                }
            }
        }
    }

    // Loop through again, this time creating the `push` classes
    @for $i from 1 to $numColumns {
        // Percentage-based width of the column
        $width: column-width-calc($i, $numColumns);

        .cui-push-#{$breakpointName}-#{$i} {
            margin-left: $width;
        }
    }

    // Loop through again, this time creating the `pull` classes
    @for $i from 1 to $numColumns {
        // Percentage-based width of the column
        $width: column-width-calc($i, $numColumns);

        .cui-pull-#{$breakpointName}-#{$i} {
            margin-right: $width;
        }
    }
}


// * @section    Generate column classes
// * --------------------------------------------------------
@include generate-grid($cui-grid-column-count);


// * @section    Visibility classes
// * --------------------------------------------------------

// Medium (tablet) column widths
@media only screen and (min-width: $cui-bp-medium) {
    .cui-hide-col-small,
    .cui-hide-col-large {
        display: block;
    }
}

// Large (desktop) column widths
@media only screen and (min-width: $cui-bp-large) {
    .cui-hide-col-small,
    .cui-hide-col-medium {
        display: block;
    }
}


// * @section    Push columns
// * --------------------------------------------------------
.cui-push-right {
    float: right;
}
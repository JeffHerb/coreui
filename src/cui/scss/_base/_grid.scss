//   ========================================================
// * @name       _grid.scss
// * @desc       Responsive grid styles
// * @author     Manolo Farfan, Craig Patik
// * @version    1.0.0.20141231
// * @see        https://github.com/ny/frg-coreui
//   ========================================================


// * @section    Row and col structures
// * @desc       The grid's row and columns (default cols 12)
// *             - Fluid & fixed + fluid layouts with fillers
// *             - Clearfix to force new row
// * --------------------------------------------------------
.cui-row {
    @include row;
}

[class*="cui-col-"] {
    min-height: 1.5em;
    float: left;
}

[class*="cui-fixed-col-"] {
    float: left;
}

[class*="cui-col-"],
[class*="cui-fixed-col-"],
[class*="cui-filler-col-"] {
    position: relative;
    @include clearfix;
}

[class*="cui-col-"],
[class*="cui-fixed-col-"],
[class*="cui-filler-col-"],
section > header,
nav > header {
    padding: $cui-grid-column-padding;
}

.cui-row,
.cui-clearfix {
    @include clearfix;
}


// * @section    Column generation
// * --------------------------------------------------------

$cui-grid-breakpoints: (
    ("medium" $cui-bp-medium),
    ("large" $cui-bp-large)
);

@function column-width-calc($colNumber, $colTotal) {
    @return percentage($colNumber / $colTotal);
}

// Generates column classes for all breakpoint sizes
@mixin generate-grid($numColumns: $cui-grid-column-count) {
    // Return width for a single division (column) as a percentage of the total container (row)
    @function column-width-calc($colNumber, $colTotal) {
        @return percentage($colNumber / $colTotal);
    }

    // Breakpoint-specific utility columns that are not part of the standard N-column row/grid pattern
    @mixin utility-classes($breakpointName) {
        .cui-hide-col-#{$breakpointName} {
            @include hide-voluntary;
        }

        .cui-inline-col-#{$breakpointName} {
            display: inline-block;
            float: none;
            width: auto;
        }
    }

    // Helper method that calls the actual class-creating mixins above
    // We need this because we loop through all of the breakpoints except "small" but we want to be sure we're outputting the same code for all sizes
    @mixin generate-classes($breakpointName: "", $numColumns: $cui-grid-column-count, $breakpointMaxWidth: "") {
        @include generate-column($breakpointName, $numColumns, $breakpointMaxWidth);
        @include utility-classes($breakpointName);
    }

    // Finally, generate the classes for each size:

    // Base (small) size -- these styles are not wrapped in a media query
    @include generate-classes("small", $numColumns, $cui-bp-medium);

    // All other sizes
    @each $b in $cui-grid-breakpoints {
        $breakpointName: nth($b, 1);
        $breakpointMinWidth: nth($b, 2);

        // Create a new media query for the breakpoint
        @include pointbreak($breakpointMinWidth) {
            // Generate classes within the media query
            @include generate-classes($breakpointName, $numColumns, $cui-bp-medium);
        }
    }
}

@mixin generate-column($breakpointName: "", $numColumns: $cui-grid-column-count, $breakpointMaxWidth: "") {
    // Loop through each column creating the grid
    @for $i from 1 to $numColumns + 1 {

        // Create this column number and assign it the correct width.
        .cui-col-#{$breakpointName}-#{$i} {
            width: column-width-calc($i, $numColumns);
        }

        @if $breakpointMaxWidth != "" {
            @if $i == 6 {
                // Make sure every column that begins a new "row" clears the elements before it.
                // E.g. if there are four cols inside a row, and the first col is tall, the third col would not wrap down to a new line as intended
                // We're using `max-width` media query so it doesn't affect a `.cui-col-small-6.cui-col-medium-*` element in a larger viewport
                //TODO: Copy this practice for other classes (e.g. every 4th col-small-4 should wrap to a new line)
                //FIXME: This currently only generates for the small (no-MQ) breakpoint
                @include pointbreak($breakpointMaxWidth, true) {
                    .cui-col-#{$breakpointName}-#{$i}:nth-child(2n+3) {
                        clear: both;
                    }
                }
            }
        }
    }

    // Loop through again this time creating the `push` classes
    @for $i from 1 to $numColumns {
        .cui-push-#{$breakpointName}-#{$i} {
            margin-left: column-width-calc($i, $numColumns);
        }
    }

    // Loop through again this time creating the `pull` classes
    @for $i from 1 to $numColumns {
        .cui-pull-#{$breakpointName}-#{$i} {
            margin-right: column-width-calc($i, $numColumns);
        }
    }
}

// Generate fixed and filler classes for a given breakpoint
@mixin generate-fixed-filler-columns($breakpointName: "") {
    // Fixed & filler column layout approach:
    // Give fixed columns `width: Npx` and let them inherit `float: left`. Give filler columns `margin-left: Npx` and apply `float: none` and `width: 100%`. This works except that the filler columns are always 1 pixel taller than the fixed columns due to floats being handled differently.
    // We avoid floats using `calc()` which has good browser support but not quite 100% yet. Fixed columns are the same as above (`width: Npx`, inherit `float:left`). Filler columns use `width: calc(100% - Npx)` and no `margin-left`.

    $sizes: (100, 200, 300, 400);

    // Fixed
    @each $size in $sizes {
        [class*="cui-fixed-col-#{$breakpointName}-"][class*="#{$breakpointName}-#{$size}"] {
            width: #{$size}px;
        }
    }

    // Filler

    // "push" = to the right
    // "pull" = to the left

    .no-csscalc [class*="cui-col-#{$breakpointName}-right"],
    .no-csscalc [class*="cui-col-#{$breakpointName}-left"] {
        float: none;
        width: 100%;
    }

    // Specific filler sizes
    @each $size in $sizes {
        [class*="cui-col-#{$breakpointName}-right"][class*="#{$breakpointName}-right-#{$size}px"],
        [class*="cui-col-#{$breakpointName}-left"][class*="#{$breakpointName}-left-#{$size}px"] {
            width: calc(100% - #{$size}px);
        }

        .no-csscalc {
            [class*="cui-col-#{$breakpointName}-right"][class*="#{$breakpointName}-right-#{$size}px"] {
                margin-left: #{$size}px;
            }

            [class*="cui-col-#{$breakpointName}-left"][class*="#{$breakpointName}-left-#{$size}px"] {
                margin-right: #{$size}px;
            }
        }
    }
}

// Generate the grid and column classes
@include generate-grid($cui-grid-column-count);


// * @section    Small column widths
// * --------------------------------------------------------
// Fixed/filler
@media only screen and (max-width: $cui-bp-medium-minus) {
    @include generate-fixed-filler-columns("small");
}

// * @section    Tablet (medium) column widths
// * --------------------------------------------------------
@media only screen and (min-width: $cui-bp-medium) {
    .cui-hide-col-small,
    .cui-hide-col-large {
        display: block;
    }
}

// Fixed/filler
@media only screen and (min-width: $cui-bp-medium) and (max-width: $cui-bp-large-minus) {
    @include generate-fixed-filler-columns("medium");
}


// * @section    Desktop (large) column widths
// * --------------------------------------------------------
@media only screen and (min-width: $cui-bp-large) {
    .cui-hide-col-small,
    .cui-hide-col-medium {
        display: block;
    }

    @include generate-fixed-filler-columns("large");
}


// * @section    Push columns
// * --------------------------------------------------------
.cui-push-right {
    float: right;
}